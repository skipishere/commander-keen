name: Build Release

on:
  release:
    types: [created]
  workflow_dispatch:

jobs:
  # Single job for all platform builds with shared setup
  build-all-platforms:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for tags

    - name: Determine version tag
      id: tag
      run: |
        # Determine which tag to use for the build version
        if [ "${{ github.event_name }}" = "release" ]; then
          BUILD_TAG="${{ github.event.release.tag_name }}"
          echo "Using release tag: $BUILD_TAG"
        else
          # Get the latest tag from the repository
          BUILD_TAG="$(git describe --tags --abbrev=0 2>/dev/null)-dev"
          echo "Using latest repository tag: $BUILD_TAG"
        fi
        
        # Clean the tag (remove 'v' prefix if present) for version parsing
        CLEAN_TAG=$(echo "$BUILD_TAG" | sed 's/^v//')
        
        echo "=== Build Version Information ==="
        echo "Raw tag: $BUILD_TAG"
        echo "Clean version: $CLEAN_TAG"
        echo "================================="
        
        # Export both raw and clean versions
        echo "tag=$BUILD_TAG" >> $GITHUB_OUTPUT
        echo "version=$CLEAN_TAG" >> $GITHUB_OUTPUT

    - name: Build Docker image (shared setup)
      run: |
        echo "Building Docker image with Godot setup..."
        docker build -t commander-keen-builder .

    - name: Setup Godot project (import assets and compile C#)
      run: |
        echo "Setting up Godot project (import assets and compile C#)..."
        echo "Using version tag: ${{ steps.tag.outputs.tag }}"
        docker run --rm \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          -e VERSION_TAG="${{ steps.tag.outputs.tag }}" \
          commander-keen-builder setup

    - name: Build Windows platform
      run: |
        echo "Building Windows platform..."
        docker run --rm \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          -e BUILD_PLATFORM=windows \
          -e VERSION_TAG="${{ steps.tag.outputs.tag }}" \
          commander-keen-builder build

    - name: Verify Windows build
      run: |
        if [ ! -f "artifact/commander-keen-windows.exe" ]; then
          echo "ERROR: Windows build file missing!"
          exit 1
        fi
        echo "Windows build successful:"
        ls -la artifact/commander-keen-windows.exe

    - name: Build Linux platform
      run: |
        echo "Building Linux platform..."
        docker run --rm \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          -e BUILD_PLATFORM=linux \
          -e VERSION_TAG="${{ steps.tag.outputs.tag }}" \
          commander-keen-builder build

    - name: Verify Linux build
      run: |
        if [ ! -f "artifact/commander-keen-linux.x86_64" ]; then
          echo "ERROR: Linux build file missing!"
          exit 1
        fi
        echo "Linux build successful:"
        ls -la artifact/commander-keen-linux.x86_64

    - name: Build macOS platform
      run: |
        echo "Building macOS platform..."
        docker run --rm \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          -e BUILD_PLATFORM=macos \
          -e VERSION_TAG="${{ steps.tag.outputs.tag }}" \
          commander-keen-builder build

    - name: Verify macOS build
      run: |
        if [ ! -f "artifact/commander-keen-macos.zip" ]; then
          echo "ERROR: macOS build file missing!"
          exit 1
        fi
        echo "macOS build successful:"
        ls -la artifact/commander-keen-macos.zip

    - name: Fix artifact permissions
      run: |
        sudo chown -R $USER:$USER artifact/
        sudo chmod -R 755 artifact/

    - name: Package all builds
      run: |
        cd artifact
        TAG_NAME="${{ steps.tag.outputs.tag }}"
        
        # Package Windows
        echo "Packaging Windows build..."
        zip -r commander-keen-windows-${TAG_NAME}.zip commander-keen-windows.exe
        
        # Package Linux
        echo "Packaging Linux build..."
        chmod +x commander-keen-linux.x86_64
        zip -r commander-keen-linux-${TAG_NAME}.zip commander-keen-linux.x86_64
        
        # Package macOS (already zipped by Godot)
        echo "Packaging macOS build..."
        mv commander-keen-macos.zip commander-keen-macos-${TAG_NAME}.zip
        
        echo "All packages created:"
        ls -la *.zip

    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: commander-keen-windows-${{ steps.tag.outputs.tag }}
        path: artifact/commander-keen-windows-${{ steps.tag.outputs.tag }}.zip

    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: commander-keen-linux-${{ steps.tag.outputs.tag }}
        path: artifact/commander-keen-linux-${{ steps.tag.outputs.tag }}.zip

    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: commander-keen-macos-${{ steps.tag.outputs.tag }}
        path: artifact/commander-keen-macos-${{ steps.tag.outputs.tag }}.zip

  # Final job to create the release with all artifacts
  release:
    needs: build-all-platforms
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    permissions:
      contents: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up tag name
      id: tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.tag }}" ]; then
          echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" = "push" ]; then
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" = "release" ]; then
          echo "tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
        else
          echo "tag=dev-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
        fi

    - name: Download all artifacts
      uses: actions/download-artifact@v5
      with:
        path: artifacts/

    - name: List downloaded artifacts
      run: |
        echo "Downloaded artifacts:"
        find artifacts/ -type f -name "*.zip" | sort

    - name: Create or update release
      run: |
        TAG_NAME="${{ steps.tag.outputs.tag }}"
        
        # Check if release already exists
        if gh release view "$TAG_NAME" >/dev/null 2>&1; then
          echo "Release $TAG_NAME already exists, uploading assets..."
          # Upload all artifacts to existing release
          find artifacts/ -type f -name "*.zip" -exec gh release upload "$TAG_NAME" {} \;
        else
          echo "Creating new release $TAG_NAME..."
          # Create new release with all artifacts
          gh release create "$TAG_NAME" \
            --title "Release $TAG_NAME" \
            --notes "Automated release build for $TAG_NAME" \
            artifacts/*/*.zip
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
