name: Build Release

on:
  push:
    tags:
      - 'v*.*.*'
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build (e.g., v1.0.0)'
        required: false
        default: ''

jobs:
  # First job to set up the tag name for all matrix jobs
  setup:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
    steps:
    - name: Set up tag name
      id: tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.tag }}" ]; then
          echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" = "push" ]; then
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" = "release" ]; then
          echo "tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
        else
          echo "tag=dev-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
        fi

  # Matrix job for parallel platform builds
  build:
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
    strategy:
      matrix:
        platform: [windows, linux, macos]
        include:
          - platform: windows
            preset: "WindowsDesktop"
            output: "commander-keen-windows.exe"
            artifact_name: "commander-keen-windows"
          - platform: linux
            preset: "Linux/X11"
            output: "commander-keen-linux.x86_64"
            artifact_name: "commander-keen-linux"
          - platform: macos
            preset: "macOS"
            output: "commander-keen-macos.zip"
            artifact_name: "commander-keen-macos"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build ${{ matrix.platform }} with Docker
      run: |
        # Build the custom Docker image
        docker build -t commander-keen-builder .
        
        # Run the single-platform build
        docker run --rm \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          -e BUILD_PLATFORM=${{ matrix.platform }} \
          -e BUILD_PRESET="${{ matrix.preset }}" \
          -e BUILD_OUTPUT="${{ matrix.output }}" \
          commander-keen-builder

    - name: Verify ${{ matrix.platform }} build
      run: |
        if [ ! -f "artifact/${{ matrix.output }}" ]; then
          echo "ERROR: ${{ matrix.platform }} build file missing!"
          exit 1
        fi
        echo "${{ matrix.platform }} build successful:"
        ls -la artifact/${{ matrix.output }}

    - name: Package ${{ matrix.platform }} build
      run: |
        cd artifact
        
        if [ "${{ matrix.platform }}" = "windows" ]; then
          zip -r ${{ matrix.artifact_name }}-${{ needs.setup.outputs.tag }}.zip ${{ matrix.output }}
        elif [ "${{ matrix.platform }}" = "linux" ]; then
          chmod +x ${{ matrix.output }}
          zip -r ${{ matrix.artifact_name }}-${{ needs.setup.outputs.tag }}.zip ${{ matrix.output }}
        elif [ "${{ matrix.platform }}" = "macos" ]; then
          mv ${{ matrix.output }} ${{ matrix.artifact_name }}-${{ needs.setup.outputs.tag }}.zip
        fi

    - name: Upload ${{ matrix.platform }} artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}-${{ needs.setup.outputs.tag }}
        path: artifact/${{ matrix.artifact_name }}-${{ needs.setup.outputs.tag }}.zip

  # Final job to create the release with all artifacts
  release:
    needs: [setup, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || github.event_name == 'push'
    permissions:
      contents: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: List downloaded artifacts
      run: |
        echo "Downloaded artifacts:"
        find artifacts/ -type f -name "*.zip" | sort

    - name: Create or update release
      run: |
        TAG_NAME="${{ needs.setup.outputs.tag }}"
        
        # Check if release already exists
        if gh release view "$TAG_NAME" >/dev/null 2>&1; then
          echo "Release $TAG_NAME already exists, uploading assets..."
          # Upload all artifacts to existing release
          find artifacts/ -type f -name "*.zip" -exec gh release upload "$TAG_NAME" {} \;
        else
          echo "Creating new release $TAG_NAME..."
          # Create new release with all artifacts
          gh release create "$TAG_NAME" \
            --title "Release $TAG_NAME" \
            --notes "Automated release build for $TAG_NAME" \
            artifacts/*/*.zip
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
