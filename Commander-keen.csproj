<Project Sdk="Godot.NET.Sdk/4.4.1">
  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <EnableDynamicLoading>true</EnableDynamicLoading>
    <RootNamespace>Commanderkeen</RootNamespace>
  </PropertyGroup>

  <!-- Get Git tag/commit info during build -->
  <Target Name="GetGitInfo" BeforeTargets="GetAssemblyVersion;GenerateAssemblyInfo">
    <!-- Execute git describe to get version info (only if no version provided from CI) -->
    <Exec Command="git describe --tags --always --dirty" 
          ConsoleToMSBuild="true" 
          ContinueOnError="true"
          StandardOutputImportance="low">
      <Output TaskParameter="ConsoleOutput" PropertyName="GitDescribeOutput" />
      <Output TaskParameter="ExitCode" PropertyName="GitExitCode" />
    </Exec>
    
    <PropertyGroup>
      <!-- Use git describe output if successful and no CI version was provided -->
      <GitTag Condition="'$(GitExitCode)' == '0' AND '$(GitDescribeOutput)' != ''">$(GitDescribeOutput)</GitTag>
            
      <!-- Parse and clean up the version for .NET compatibility -->
      <!-- Remove 'v' prefix if present -->
      <RawVersion>$([System.Text.RegularExpressions.Regex]::Replace('$(GitTag)', '^v', ''))</RawVersion>
      
      <!-- Extract just the version numbers (major.minor.patch) from start of string -->
      <!-- This handles formats like: 1.2.3, 1.2.3-alpha, 1.2.3-alpha-7-gc2ee5a8 -->
      <CleanVersion>$([System.Text.RegularExpressions.Regex]::Replace('$(RawVersion)', '^(\d+\.\d+\.\d+).*', '$1'))</CleanVersion>
            
      <!-- Keep the original tag for InformationalVersion (this can be any format) -->
      <InformationalVersionValue>$(RawVersion)</InformationalVersionValue>
    </PropertyGroup>
    
    <Message Text="Version Parsing - Raw: '$(GitTag)', Parsed: '$(CleanVersion)', Info: '$(InformationalVersionValue)'" Importance="high" />
    
    <!-- Update version properties with parsed info -->
    <PropertyGroup>
      <!-- InformationalVersion can handle any format - use the full git describe output -->
      <InformationalVersion>$(InformationalVersionValue)</InformationalVersion>
      <!-- These must be in standard .NET format (major.minor.patch[.build]) -->
      <Version>$(CleanVersion)</Version>
      <AssemblyVersion>$(CleanVersion)</AssemblyVersion>
      <FileVersion>$(CleanVersion)</FileVersion>
    </PropertyGroup>
  </Target>
</Project>